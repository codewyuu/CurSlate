"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6653],{55589:(r,e,t)=>{var o=t(65606);const s=t(67713),i=t(57975),{promisify:n}=t(40537),c=t(15345).satisfies(o.version,">=10.12.0"),a=r=>{if("win32"===o.platform&&/[<>:"|?*]/.test(r.replace(i.parse(r).root,""))){const e=new Error(`Path contains invalid characters: ${r}`);throw e.code="EINVAL",e}},d=r=>({mode:511,fs:s,...r}),f=r=>{const e=new Error(`operation not permitted, mkdir '${r}'`);return e.code="EPERM",e.errno=-4048,e.path=r,e.syscall="mkdir",e};r.exports=async(r,e)=>{a(r),e=d(e);const t=n(e.fs.mkdir),o=n(e.fs.stat);if(c&&e.fs.mkdir===s.mkdir){const o=i.resolve(r);return await t(o,{mode:e.mode,recursive:!0}),o}const h=async r=>{try{return await t(r,e.mode),r}catch(e){if("EPERM"===e.code)throw e;if("ENOENT"===e.code){if(i.dirname(r)===r)throw f(r);if(e.message.includes("null bytes"))throw e;return await h(i.dirname(r)),h(r)}try{if(!(await o(r)).isDirectory())throw new Error("The path is not a directory")}catch(r){throw e}return r}};return h(i.resolve(r))},r.exports.sync=(r,e)=>{if(a(r),e=d(e),c&&e.fs.mkdirSync===s.mkdirSync){const t=i.resolve(r);return s.mkdirSync(t,{mode:e.mode,recursive:!0}),t}const t=r=>{try{e.fs.mkdirSync(r,e.mode)}catch(o){if("EPERM"===o.code)throw o;if("ENOENT"===o.code){if(i.dirname(r)===r)throw f(r);if(o.message.includes("null bytes"))throw o;return t(i.dirname(r)),t(r)}try{if(!e.fs.statSync(r).isDirectory())throw new Error("The path is not a directory")}catch(r){throw o}}return r};return t(i.resolve(r))}}}]);